# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gv', [dirname(__file__)])
        except ImportError:
            import _gv
            return _gv
        if fp is not None:
            try:
                _mod = imp.load_module('_gv', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gv = swig_import_helper()
    del swig_import_helper
else:
    import _gv
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def digraph(*args):
  return _gv.digraph(*args)
digraph = _gv.digraph

def strictgraph(*args):
  return _gv.strictgraph(*args)
strictgraph = _gv.strictgraph

def strictdigraph(*args):
  return _gv.strictdigraph(*args)
strictdigraph = _gv.strictdigraph

def readstring(*args):
  return _gv.readstring(*args)
readstring = _gv.readstring

def read(*args):
  return _gv.read(*args)
read = _gv.read

def graph(*args):
  return _gv.graph(*args)
graph = _gv.graph

def node(*args):
  return _gv.node(*args)
node = _gv.node

def edge(*args):
  return _gv.edge(*args)
edge = _gv.edge

def setv(*args):
  return _gv.setv(*args)
setv = _gv.setv

def getv(*args):
  return _gv.getv(*args)
getv = _gv.getv

def nameof(*args):
  return _gv.nameof(*args)
nameof = _gv.nameof

def findsubg(*args):
  return _gv.findsubg(*args)
findsubg = _gv.findsubg

def findnode(*args):
  return _gv.findnode(*args)
findnode = _gv.findnode

def findedge(*args):
  return _gv.findedge(*args)
findedge = _gv.findedge

def findattr(*args):
  return _gv.findattr(*args)
findattr = _gv.findattr

def headof(*args):
  return _gv.headof(*args)
headof = _gv.headof

def tailof(*args):
  return _gv.tailof(*args)
tailof = _gv.tailof

def graphof(*args):
  return _gv.graphof(*args)
graphof = _gv.graphof

def rootof(*args):
  return _gv.rootof(*args)
rootof = _gv.rootof

def protonode(*args):
  return _gv.protonode(*args)
protonode = _gv.protonode

def protoedge(*args):
  return _gv.protoedge(*args)
protoedge = _gv.protoedge

def ok(*args):
  return _gv.ok(*args)
ok = _gv.ok

def firstsubg(*args):
  return _gv.firstsubg(*args)
firstsubg = _gv.firstsubg

def nextsubg(*args):
  return _gv.nextsubg(*args)
nextsubg = _gv.nextsubg

def firstsupg(*args):
  return _gv.firstsupg(*args)
firstsupg = _gv.firstsupg

def nextsupg(*args):
  return _gv.nextsupg(*args)
nextsupg = _gv.nextsupg

def firstedge(*args):
  return _gv.firstedge(*args)
firstedge = _gv.firstedge

def nextedge(*args):
  return _gv.nextedge(*args)
nextedge = _gv.nextedge

def firstout(*args):
  return _gv.firstout(*args)
firstout = _gv.firstout

def nextout(*args):
  return _gv.nextout(*args)
nextout = _gv.nextout

def firsthead(*args):
  return _gv.firsthead(*args)
firsthead = _gv.firsthead

def nexthead(*args):
  return _gv.nexthead(*args)
nexthead = _gv.nexthead

def firstin(*args):
  return _gv.firstin(*args)
firstin = _gv.firstin

def nextin(*args):
  return _gv.nextin(*args)
nextin = _gv.nextin

def firsttail(*args):
  return _gv.firsttail(*args)
firsttail = _gv.firsttail

def nexttail(*args):
  return _gv.nexttail(*args)
nexttail = _gv.nexttail

def firstnode(*args):
  return _gv.firstnode(*args)
firstnode = _gv.firstnode

def nextnode(*args):
  return _gv.nextnode(*args)
nextnode = _gv.nextnode

def firstattr(*args):
  return _gv.firstattr(*args)
firstattr = _gv.firstattr

def nextattr(*args):
  return _gv.nextattr(*args)
nextattr = _gv.nextattr

def rm(*args):
  return _gv.rm(*args)
rm = _gv.rm

def layout(*args):
  return _gv.layout(*args)
layout = _gv.layout

def render(*args):
  return _gv.render(*args)
render = _gv.render

def renderchannel(*args):
  return _gv.renderchannel(*args)
renderchannel = _gv.renderchannel

def renderresult(*args):
  return _gv.renderresult(*args)
renderresult = _gv.renderresult

def renderdata(*args):
  return _gv.renderdata(*args)
renderdata = _gv.renderdata

def write(*args):
  return _gv.write(*args)
write = _gv.write
# This file is compatible with both classic and new-style classes.


